ğŸ“˜ Resumo: Fundamentos da ProgramaÃ§Ã£o Orientada a Objetos com Java

1. Classe vs Objeto
Classe Ã© o molde, uma estrutura que define atributos e comportamentos. Objeto Ã© a instÃ¢ncia real criada a partir da classe.

ğŸ§± Exemplo:
class Pessoa {
    String nome;
    int idade;
}
Pessoa p1 = new Pessoa(); // objeto


2. Valor vs ReferÃªncia
Tipos primitivos (int, double, etc.) sÃ£o passados por valor. Objetos sÃ£o passados por referÃªncia â€” ou seja, vocÃª manipula o mesmo conteÃºdo original na memÃ³ria.
ğŸ“Œ Alterar o conteÃºdo de um objeto dentro de um mÃ©todo altera o original.

<img src="https://www.bigfootdigital.co.uk/wp-content/uploads/2020/07/image-optimisation-scaled.jpg">
3. Membros de Classe vs Membros de InstÃ¢ncia
Membros de instÃ¢ncia: pertencem ao objeto. Cada objeto tem sua cÃ³pia. Membros de classe (static): pertencem Ã  classe. Compartilhados entre todas as instÃ¢ncias.
ğŸ§± Exemplo:

static int contador; // pertence Ã  classe


4. Palavra-chave this
Serve para referenciar o prÃ³prio objeto atual. Usado comumente para diferenciar parÃ¢metros de atributos.
ğŸ§± Exemplo:

public void setNome(String nome) {
    this.nome = nome; // this se refere ao atributo da classe
}


5. OrganizaÃ§Ã£o das Classes atÃ© agora
VocÃª aprendeu a estruturar classes como:
â€¢ Tarefa
â€¢ Usuario
â€¢ Com mÃ©todos de controle (concluir(), adicionarXp(), etc.)
â€¢ E estruturas para exibir dados, validar entradas e interagir com o usuÃ¡rio

